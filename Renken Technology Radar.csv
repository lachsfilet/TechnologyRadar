name;quadrant;ring;isNew;description
Pipelines for infrastructure as code;Techniques;Adopt;WAHR;<p>The continued adoption of containers for deployments, especially <a href="https://www.thoughtworks.com/radar/platforms/docker">Docker</a>, has made <strong>container security scanning</strong> a must-have technique and we've moved this technique into Adopt to reflect that. Specifically, containers introduced a new path for security issues; it's vital that you use tools to scan and check containers during deployment. We prefer using automated scanning tools that run as part of the deployment pipeline.</p>
Azure DevOps;Platforms;Assess;FALSCH;<p><strong><a href="https://azure.microsoft.com/en-us/services/devops/">Azure DevOps</a></strong> services include a set of managed services such as hosted Git repos, CI/CD pipelines, automated testing tooling, backlog management tooling and artifact repository. Azure DevOps Pipelines have been maturing over time. We particularly like its ability to define <a href="https://www.thoughtworks.com/radar/techniques/pipelines-as-code">Pipelines as code</a> and its ecosystem of extensions on the Azure DevOps <a href="https://marketplace.visualstudio.com/azuredevops">marketplace</a>. At the time of writing, our teams are still running into a few immature features, including lack of an effective UI for pipeline visualization and navigation and the inability to trigger a pipeline from artifacts or other pipelines.</p>
Visual Studio;Tools;Adopt;FALSCH;<p>We've seen significant benefits from introducing <a href="https://martinfowler.com/articles/microservices.html">microservices</a>, which have allowed teams to scale the delivery of independently deployed and maintained services. Unfortunately, we've also seen many teams create a front-end monolith — a large, entangled browser application that sits on top of the back-end services — largely neutralizing the benefits of microservices. <strong>Micro frontends</strong> have continued to gain in popularity since they were first introduced. We've seen many teams adopt some form of this architecture as a way to manage the complexity of multiple developers and teams contributing to the same user experience. In June of this year, one of the originators of this technique published an <a href="https://martinfowler.com/articles/micro-frontends.html">introductory article</a> that serves as a reference for micro frontends. It shows how this style can be implemented using various web programming mechanisms and builds out an example application using <a href="https://www.thoughtworks.com/radar/languages-and-frameworks/react-js">React.js</a>. We're confident this style will grow in popularity as larger organizations try to decompose UI development across multiple teams.</p>
Amiga E;languages-and-frameworks;Adopt;WAHR;<p>The use of continuous delivery pipelines to orchestrate the release process for software has become a mainstream concept. CI/CD tools can be used to test server configuration (e.g., Chef cookbooks, Puppet modules, Ansible playbooks), server image building (e.g., <a href="https://www.thoughtworks.com/radar/tools/packer">Packer</a>), environment provisioning (e.g., <a href="https://www.thoughtworks.com/radar/tools/terraform">Terraform</a>, CloudFormation) and the integration of environments. The use of <strong>pipelines for infrastructure as code</strong> lets you find errors before changes are applied to operational environments — including environments used for development and testing. They also offer a way to ensure that infrastructure tooling is run consistently, using CI/CD agents rather than individual workstations. Our teams have had good results adopting this technique on their projects.</p>